import telebot
from telebot import types
import sqlite3
from datetime import datetime
import locale
import os

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot('7654378121:AAEZ5IrR1tG0GnXJCtKddYuUrViexYfkeHo')

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–∫–∞–ª–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name

    if first_name is None:
        bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {last_name}. –≠—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫–æ –º–Ω–µ!üíÖ')
    elif last_name is None:
        bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {first_name}. –≠—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫–æ –º–Ω–µ!üíÖ')
    else:
        bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {first_name} {last_name}. –≠—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫–æ –º–Ω–µ!üíÖ')
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
    show_menu(message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é
def show_menu(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—èüìÖ', callback_data='book')
    btn2 = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å‚ùå', callback_data='cancel')
    btn3 = types.InlineKeyboardButton('–ù–µ–¥–∞–≤–Ω–∏–µ —Ä–∞–±–æ—Ç—ãüíÖ', callback_data='works')
    btn4 = types.InlineKeyboardButton('–û –º–∞—Å—Ç–µ—Ä–µüë©', callback_data='about')
    markup.row(btn1, btn2)
    markup.row(btn3, btn4)
    bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
@bot.message_handler(commands=['admin'])
def admin(message):
    if (message.chat.id == 536796490) or (message.chat.id == 920281318):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å', callback_data='insert_book')
        btn2 = types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å', callback_data='delete_book')
        btn3 = types.InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤', callback_data='view_clients')
        markup.row(btn1, btn2)
        markup.row(btn3)
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, –ê–ª–∏–Ω–∞. –≠—Ç–æ —Ç–≤–æ–π –ª—é–±–∏–º—ã–π –†–æ–º–∞. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    if call.data == 'book':
        show_unique_dates(call.message)
    elif call.data == 'cancel':
        delete_booking(call.message)
    elif call.data == 'works':
        send_recent_works(call.message)  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    elif call.data == 'about':
        bot.send_message(call.message.chat.id, '–Ø –º–∞—Å—Ç–µ—Ä –º–∞–Ω–∏–∫—é—Ä–∞ –ê–ª–∏–Ω–∞. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ Nude-–º–∞–Ω–∏–∫—é—Ä–µ. –í —Å—Ä–µ–¥–Ω–µ–º, –≤—Ä–µ–º—è –º–∞–Ω–∏–∫—é—Ä–∞ —Å–æ—Å—Ç–æ–≤–ª—è–µ—Ç 2 —á–∞—Å–∞.\
 –í –∫–∞–∂–¥—É—é —Å–≤–æ—é —Ä–∞–±–æ—Ç—É —è –≤–∫–ª–∞–¥—ã–≤–∞—é –¥—É—à—É –∏ —Å—Ç–∞—Ä–∞—é—Å—å, —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç—É –≤—Å–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å. –ë—É–¥—É —Ä–∞–¥–∞ —Å —Ç–æ–±–æ–π –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ –≤–æ—Ç –º–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω - +7(913)-087-37-66 –∏–ª–∏ —Ç–µ–ª–µ–≥—Ä–∞–º - @seongdi')
    elif call.data == 'insert_book':
        bot.send_message(call.message.chat.id, '–•–æ—Ä–æ—à–æ, –Ω–∞–ø–∏—à–∏ –¥–∞—Ç—É(12.12.2024)')
        bot.register_next_step_handler(call.message, insert_book)
    elif call.data == 'delete_book':
        delete_book(call.message)
    elif call.data == 'view_clients':
        view_clients(call.message)
    elif call.data.startswith('select_date_'):
        handle_date_selection(call)
    elif call.data.startswith('select_time_'):
        handle_time_selection(call)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Ç–µ–∫—Å—Ç–∞
def send_recent_works(message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    bot.send_message(message.chat.id, '–í–æ—Ç –æ–¥–Ω–∏ –∏–∑ –º–æ–∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–∞–±–æ—Ç. –¢–∞–∫—É—é –∂–µ –∫—Ä–∞—Å–æ—Ç—É —è —Å–¥–µ–ª–∞—é –∏ —Ç–µ–±–µ!')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ø–∞–ø–∫–∏ static
    photo_folder = 'static'
    photo_files = ['photo1.jpg', 'photo2.jpg', 'photo3.jpg', 'photo4.jpg']
    
    for photo_file in photo_files:
        photo_path = os.path.join(photo_folder, photo_file)
        if os.path.exists(photo_path):
            with open(photo_path, 'rb') as photo:
                bot.send_photo(message.chat.id, photo)
        else:
            bot.send_message(message.chat.id, f'–§–∞–π–ª {photo_file} –Ω–µ –Ω–∞–π–¥–µ–Ω.')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞—Ç
def show_unique_dates(message):
    conn = sqlite3.connect('rte_nails.sql')
    cur = conn.cursor()
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã–µ –æ–∫–Ω–∞ (is_booked = 0)
    cur.execute("SELECT DISTINCT date FROM booking WHERE date >= DATE('now') AND is_booked = 0 ORDER BY date ASC")
    dates = cur.fetchall()

    cur.close()
    conn.close()

    if dates:
        markup = types.InlineKeyboardMarkup()
        for date in dates:
            date_obj = datetime.strptime(date[0], "%Y-%m-%d")
            day_of_week = date_obj.strftime('%a')
            formatted_date = f"{date_obj.strftime('%d.%m.%Y')}({day_of_week})"
            btn = types.InlineKeyboardButton(f"–î–∞—Ç–∞: {formatted_date}", callback_data=f"select_date_{date[0]}")
            markup.add(btn)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ–∫–æ—à–µ–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
def handle_date_selection(call):
    selected_date = call.data.split('_')[-1]

    conn = sqlite3.connect('rte_nails.sql')
    cur = conn.cursor()
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã–µ –æ–∫–Ω–∞ (is_booked = 0)
    cur.execute("SELECT id, time FROM booking WHERE date = ? AND is_booked = 0", (selected_date,))
    times = cur.fetchall()

    cur.close()
    conn.close()

    if times:
        markup = types.InlineKeyboardMarkup()
        for time in times:
            btn = types.InlineKeyboardButton(f"–í—Ä–µ–º—è: {time[1]}", callback_data=f"select_time_{time[0]}")
            markup.add(btn)
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏:", reply_markup=markup)
    else:
        bot.send_message(call.message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —ç—Ç—É –¥–∞—Ç—É —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ–∫–æ—à–µ–∫ –Ω–µ—Ç.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
def handle_time_selection(call):
    booking_id = call.data.split('_')[-1]

    conn = sqlite3.connect('rte_nails.sql')
    cur = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤–æ–±–æ–¥–Ω–æ –ª–∏ –æ–∫–Ω–æ
    cur.execute("SELECT date, time FROM booking WHERE id = ? AND is_booked = 0", (booking_id,))
    booking = cur.fetchone()

    if booking:
        date, time = booking
        # –ü–æ–º–µ—á–∞–µ–º –æ–∫–Ω–æ –∫–∞–∫ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ
        cur.execute("UPDATE booking SET is_booked = 1 WHERE id = ?", (booking_id,))
        conn.commit()
        bot.send_message(call.message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞ {date} –≤ {time}. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏.")
        bot.register_next_step_handler(call.message, user_name, booking_id)
    else:
        bot.send_message(call.message.chat.id, "–≠—Ç–æ –æ–∫–Ω–æ —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.")

    cur.close()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def user_name(message, booking_id):
    name = message.text.strip()
    bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —è —Å–º–æ–≥—É —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —Ç–µ–ª–µ–≥—Ä–∞–º–º –∏–ª–∏ –≤–∞—Ç—Å–∞–ø).')
    bot.register_next_step_handler(message, user_contact, booking_id, name)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def user_contact(message, booking_id, name):
    contact = message.text.strip()

    conn = sqlite3.connect('rte_nails.sql')
    cur = conn.cursor()
    
    cur.execute("SELECT date, time FROM booking WHERE id = ?", (booking_id,))
    booking = cur.fetchone()

    if booking:
        date, time = booking
        cur.execute("INSERT INTO users(user_id, name, contact, date, time) VALUES (?, ?, ?, ?, ?)", 
                    (message.chat.id, name, contact, date, time))
        conn.commit()
        bot.send_message(message.chat.id, f'–û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ {date} –≤ {time}. –ë—É–¥—É —Ä–∞–¥–∞ –≤—Å—Ç—Ä–µ—á–µ.üôÇ')
    else:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    cur.close()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def insert_book(message):
    admin_date = message.text.strip()

    try:
        date_obj = datetime.strptime(admin_date, "%d.%m.%Y")
        formatted_date = date_obj.strftime("%Y-%m-%d")
        bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ –≤—Ä–µ–º—è(18:00)')
        bot.register_next_step_handler(message, adm_time, formatted_date)
    except ValueError:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä 12.02.2025')
        bot.register_next_step_handler(message, insert_book)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def adm_time(message, formatted_date):
    admin_time = message.text.strip()
    conn = sqlite3.connect('rte_nails.sql')
    cur = conn.cursor()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –∫–∞–∫ —Å–≤–æ–±–æ–¥–Ω–æ–µ (is_booked = 0)
    cur.execute("INSERT INTO booking(date, time, is_booked) VALUES (?, ?, 0)", (formatted_date, admin_time))
    conn.commit()
    cur.close()
    conn.close()

    bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, –¥–æ–±–∞–≤–∏–ª –≤—Ä–µ–º—è')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def delete_book(message):
    conn = sqlite3.connect('rte_nails.sql')
    cur = conn.cursor()
    
    cur.execute("SELECT * FROM booking WHERE date >= DATE('now')")
    rows = cur.fetchall()

    cur.close()
    conn.close()
    
    if rows:
        response = "–í—ã–±–µ—Ä–∏ ID –∑–∞–ø–∏—Å–∏:\n"
        for row in rows:
            response += f"ID: {row[0]}, –î–∞—Ç–∞: {row[1]}, –í—Ä–µ–º—è: {row[2]}\n"
    else:
        response = "–ó–∞–ø–∏—Å–µ–π –Ω–µ—Ç."

    bot.send_message(message.chat.id, response)
    bot.register_next_step_handler(message, del_book)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø–æ ID
def del_book(message):
    book_id = message.text.strip()

    if not book_id.isdigit():
        # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞
        bot.send_message(message.chat.id, '–¶–∏—Ñ—Ä—É –Ω–∞–ø–∏—à–∏ –µ–º–∞–µ')
        bot.register_next_step_handler(message, del_book)  # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    try:
        conn = sqlite3.connect('rte_nails.sql')
        cur = conn.cursor()
        
        cur.execute("DELETE FROM booking WHERE id = ?", (book_id,))
        conn.commit()

        cur.close()
        conn.close()
        bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, —É–¥–∞–ª–∏–ª')
    
    except Exception as e:
        bot.send_message(message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def view_clients(message):
    conn = sqlite3.connect('rte_nails.sql')
    cur = conn.cursor()
    
    cur.execute("SELECT name, contact, date, time FROM users WHERE date >= DATE('now')")
    clients = cur.fetchall()

    cur.close()
    conn.close()

    if clients:
        response = "–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤:\n"
        for client in clients:
            response += f"–ò–º—è: {client[0]}, –ö–æ–Ω—Ç–∞–∫—Ç: {client[1]}, –î–∞—Ç–∞: {client[2]}, –í—Ä–µ–º—è: {client[3]}\n"
    else:
        response = "–ö–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ—Ç."

    bot.send_message(message.chat.id, response)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
def delete_booking(message):
    conn = sqlite3.connect('rte_nails.sql')
    cur = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cur.execute("SELECT date, time FROM users WHERE user_id = ?", (message.chat.id,))
    booking = cur.fetchone()

    if booking:
        date, time = booking
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –æ–∫–Ω–æ
        cur.execute("UPDATE booking SET is_booked = 0 WHERE date = ? AND time = ?", (date, time))
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cur.execute("DELETE FROM users WHERE user_id = ?", (message.chat.id,))
        conn.commit()
        bot.send_message(message.chat.id, '–í–∞—à–∞ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.')
    else:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.')

    cur.close()
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_other_messages(message):
    show_menu(message)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)